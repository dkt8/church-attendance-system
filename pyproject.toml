[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "church-attendance-system"
version = "1.0.0"
description = "QR Code-based Church Attendance System with Google Sheets integration"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Church Attendance System", email = "info@example.com"},
]
keywords = ["qr-code", "attendance", "church", "google-sheets"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Religion",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "qrcode[pil]==7.4.2",
    "Pillow>=10.0.1",
]

[project.optional-dependencies]
dev = [
    "ruff==0.1.9",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]
web = [
    "flask>=2.3.3",
    "fastapi>=0.103.1",
]
data = [
    "pandas>=2.1.1",
    "openpyxl>=3.1.2",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/dkt8/church-attendance-system"
Repository = "https://github.com/dkt8/church-attendance-system.git"
Issues = "https://github.com/dkt8/church-attendance-system/issues"

[project.scripts]
church-attendance = "src:main"

# ============================================================================
# Ruff Configuration (replaces Black + Flake8 + isort)
# ============================================================================
[tool.ruff]
# Same line length as Black
line-length = 88
target-version = "py312"

# Include Python files
include = ["*.py", "*.pyi"]

# Exclude directories
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "output",
    "__pycache__",
]

[tool.ruff.lint]
# Enable rules:
# E/W: pycodestyle errors and warnings
# F: Pyflakes
# I: isort (import sorting)
# N: pep8-naming
# UP: pyupgrade (modernize Python code)
# B: flake8-bugbear (find likely bugs)
# C4: flake8-comprehensions
# SIM: flake8-simplify
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
]

# Allow auto-fixing all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when prefixed with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use Black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
